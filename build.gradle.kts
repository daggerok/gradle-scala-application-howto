/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala library project to get you started.
 * For more details take a look at the Scala plugin chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/scala_plugin.html
 */
import org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
    // Apply the scala plugin to add support for Scala
    scala
    id("com.moowork.node") version "1.3.1"
    id("com.github.ben-manes.versions") version "0.38.0"
}

repositories {
    mavenCentral()
}

dependencies {
    val scalaVersion = "2.13"
    // Use Scala 2.12 in our application project
    implementation("org.scala-lang:scala-library:$scalaVersion.5")

    // Use Scalatest for testing our application
    testImplementation("org.scalatestplus:junit-4-13_$scalaVersion:3.2.8.0")
    testImplementation("org.scalatest:scalatest_$scalaVersion:3.2.8")
    testImplementation("org.scalatest:scalatest-funsuite_$scalaVersion:3.2.8")

    // Need scala-xml at test runtime
    testRuntimeOnly("org.scala-lang.modules:scala-xml_$scalaVersion:1.3.0") // 2.0.0-RC1
}

tasks {
    /**
     * Make a note in case of using akka and issue with reference.conf file:
     *
     * https://github.com/akka/akka/issues/24248
     * https://stackoverflow.com/questions/34326168/how-can-i-fix-missing-conf-files-when-using-shadowjar-and-scala-dependencies
     * http://www.sureshpw.com/2015/10/building-akka-bundle-with-all.html
     */
    register<Jar>("fatJar") {
        val mainClass = "com.github.daggerok.Main"
        //archiveAppendix.set("all")
        archiveClassifier.set("all")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes("Main-Class" to mainClass)
        }
        from(configurations.runtimeClasspath.get()
                .onEach { println("add from dependencies: ${it.name}") }
                .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
        shouldRunAfter("clean")
    }

    withType<Test> {
        testLogging {
            showExceptions = true
            showStandardStreams = true
            events(PASSED, SKIPPED, FAILED)
        }
    }
}

node {
    download = true
}

defaultTasks("clean", "test", "fatJar")
